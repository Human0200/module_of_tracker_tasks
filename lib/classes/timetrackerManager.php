<?php
namespace LeadSpace\TimeTracker;

use Settings24\GlobalSettings;
use CModule;
use CTasks;
use CTaskTimerManager;
use CUser;
use Exception;

class TimeTrackerManager
{
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∑–∞–¥–∞—á
     */
    private function initTasksModule()
    {
        if (!CModule::IncludeModule('tasks')) {
            throw new Exception('–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å "–ó–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã" –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private function getUserName($userId)
    {
        $rsUser = CUser::GetByID($userId);
        if ($user = $rsUser->Fetch()) {
            return $user['NAME'] . ' ' . $user['LAST_NAME'] . ' (' . $user['LOGIN'] . ')';
        }
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: $userId)";
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    private function formatTime($seconds)
    {
        $hours = floor($seconds / 3600);
        $minutes = floor(($seconds % 3600) / 60);
        $secs = $seconds % 60;
        
        if ($hours > 0) {
            return sprintf('%d:%02d:%02d', $hours, $minutes, $secs);
        } else {
            return sprintf('%d:%02d', $minutes, $secs);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–∫–æ–≤ —Ç–∞–π–º–µ—Ä–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
     */
    private function hasTimerIcon($title)
    {
        $timerPatterns = [
            '/‚è±Ô∏è\s*[\d:]+\s*\|/',           // ‚è±Ô∏è 6:48 |
            '/\[–í –†–ê–ë–û–¢–ï\s+[\d:]+\]/',      // [–í –†–ê–ë–û–¢–ï 6:48]
            '/üî•\s*[\d:]+\s*-/',            // üî• 6:48 -
            '/–ê–ö–¢–ò–í–ù–û\s*\([\d:]+\)/',       // –ê–ö–¢–ò–í–ù–û (6:48)
            '/\[–†–ê–ë–û–¢–ê\s+[\d:]+\]/',        // [–†–ê–ë–û–¢–ê 6:48]
            '/‚è∞\s*[\d:]+/',                 // ‚è∞ 6:48
            '/üü¢\s*[\d:]+/',                // üü¢ 6:48
            '/‚ñ∂Ô∏è\s*[\d:]+/'                 // ‚ñ∂Ô∏è 6:48
        ];
        
        foreach ($timerPatterns as $pattern) {
            if (preg_match($pattern, $title)) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç –∑–Ω–∞—á–∫–æ–≤ —Ç–∞–π–º–µ—Ä–∞
     */
    private function cleanTimerFromTitle($title)
    {
        $cleaningPatterns = [
            '/‚è±Ô∏è\s*[\d:]+\s*\|\s*/',        // ‚è±Ô∏è 6:48 |
            '/\[–í –†–ê–ë–û–¢–ï\s+[\d:]+\]\s*/',   // [–í –†–ê–ë–û–¢–ï 6:48]
            '/üî•\s*[\d:]+\s*-\s*/',         // üî• 6:48 -
            '/–ê–ö–¢–ò–í–ù–û\s*\([\d:]+\)\s*/',    // –ê–ö–¢–ò–í–ù–û (6:48)
            '/\[–†–ê–ë–û–¢–ê\s+[\d:]+\]\s*/',     // [–†–ê–ë–û–¢–ê 6:48]
            '/‚è∞\s*[\d:]+\s*/',              // ‚è∞ 6:48
            '/üü¢\s*[\d:]+\s*/',             // üü¢ 6:48
            '/‚ñ∂Ô∏è\s*[\d:]+\s*/'              // ‚ñ∂Ô∏è 6:48
        ];
        
        $cleanTitle = $title;
        foreach ($cleaningPatterns as $pattern) {
            $cleanTitle = preg_replace($pattern, '', $cleanTitle);
        }
        
        return trim($cleanTitle);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
     */
    private function getActiveTimers()
    {
        $activeTimerTasks = [];
        $usersToCheck = [];
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–¥–∞—á–∞–º–∏
        $rsTask = CTasks::GetList(['ID' => 'DESC'], [], ['RESPONSIBLE_ID', 'CREATED_BY']);
        while ($task = $rsTask->Fetch()) {
            if (!in_array($task['RESPONSIBLE_ID'], $usersToCheck)) {
                $usersToCheck[] = $task['RESPONSIBLE_ID'];
            }
            if (!in_array($task['CREATED_BY'], $usersToCheck)) {
                $usersToCheck[] = $task['CREATED_BY'];
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        $usersToCheck = array_unique($usersToCheck);
        
        foreach ($usersToCheck as $userId) {
            try {
                $timer = CTaskTimerManager::getInstance($userId);
                $runningTask = $timer->getRunningTask();
                
                if ($runningTask && !empty($runningTask['TASK_ID'])) {
                    $activeTimerTasks[$runningTask['TASK_ID']] = [
                        'task_id' => $runningTask['TASK_ID'],
                        'user_id' => $userId,
                        'timer_info' => $runningTask
                    ];
                }
            } catch (Exception $e) {
                continue;
            }
        }
        
        return $activeTimerTasks;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å–æ –∑–Ω–∞—á–∫–∞–º–∏ —Ç–∞–π–º–µ—Ä–æ–≤
     */
    private function getTasksWithTimerIcons()
    {
        $tasksWithTimerIcons = [];
        
        // –ò—â–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        $rsAllTasks = CTasks::GetList(
            ['ID' => 'DESC'],
            [], // –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤—Å–µ –∑–∞–¥–∞—á–∏
            ['ID', 'TITLE', 'STATUS', 'RESPONSIBLE_ID', 'ALLOW_TIME_TRACKING']
        );
        
        while ($task = $rsAllTasks->Fetch()) {
            if ($this->hasTimerIcon($task['TITLE'])) {
                $tasksWithTimerIcons[] = $task;
            }
        }
        
        return $tasksWithTimerIcons;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
     */
    private function updateTask($taskId, $newTitle)
    {
        try {
            $taskObj = new CTasks();
            $updateResult = $taskObj->Update($taskId, ['TITLE' => $newTitle]);
            
            if ($updateResult) {
                return ['success' => true, 'message' => '–û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'];
            } else {
                return ['success' => false, 'message' => $taskObj->LAST_ERROR];
            }
        } catch (Exception $e) {
            return ['success' => false, 'message' => $e->getMessage()];
        }
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–¥–∞—á
     */
    public function cleanupAndUpdateTaskTitles($returnOutput = false)
    {
        $this->initTasksModule();
        
        // –®–∞–≥ 1: –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
        $activeTimerTasks = $this->getActiveTimers();
        
        // –®–∞–≥ 2: –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á —Å–æ –∑–Ω–∞—á–∫–∞–º–∏ —Ç–∞–π–º–µ—Ä–æ–≤
        $tasksWithTimerIcons = $this->getTasksWithTimerIcons();
        
        // –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –¥–µ–π—Å—Ç–≤–∏–π
        $toClean = [];      // –ó–∞–¥–∞—á–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞)
        $toUpdate = [];     // –ó–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä)
        
        foreach ($tasksWithTimerIcons as $task) {
            $taskId = $task['ID'];
            
            if (isset($activeTimerTasks[$taskId])) {
                // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä - –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è
                $toUpdate[] = [
                    'task' => $task,
                    'timer' => $activeTimerTasks[$taskId]
                ];
            } else {
                // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ - –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å
                $toClean[] = $task;
            }
        }
        
        // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –±–µ–∑ –∑–Ω–∞—á–∫–æ–≤
        $toAdd = []; // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∑–Ω–∞—á–∫–æ–≤
        
        foreach ($activeTimerTasks as $taskId => $timerData) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            $alreadyHasIcon = false;
            foreach ($toUpdate as $updateItem) {
                if ($updateItem['task']['ID'] == $taskId) {
                    $alreadyHasIcon = true;
                    break;
                }
            }
            
            if (!$alreadyHasIcon) {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
                $rsTaskInfo = CTasks::GetList([], ['ID' => $taskId], ['ID', 'TITLE', 'STATUS', 'RESPONSIBLE_ID']);
                if ($taskInfo = $rsTaskInfo->Fetch()) {
                    $toAdd[] = [
                        'task' => $taskInfo,
                        'timer' => $timerData
                    ];
                }
            }
        }
        
        // –®–∞–≥ 5: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
        $successCount = 0;
        $errorCount = 0;
        
        // 5.1. –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á–∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
        foreach ($toClean as $task) {
            $taskId = $task['ID'];
            $cleanTitle = $this->cleanTimerFromTitle($task['TITLE']);
            
            $result = $this->updateTask($taskId, $cleanTitle);
            
            if ($result['success']) {
                $successCount++;
            } else {
                $errorCount++;
            }
        }
        
        // 5.2. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        foreach ($toUpdate as $item) {
            $task = $item['task'];
            $timer = $item['timer'];
            $taskId = $task['ID'];
            
            $cleanTitle = $this->cleanTimerFromTitle($task['TITLE']);
            $currentTime = $this->formatTime($timer['timer_info']['RUN_TIME']);
            $newTitle = "‚è±Ô∏è {$currentTime} | {$cleanTitle}";
            
            $result = $this->updateTask($taskId, $newTitle);
            
            if ($result['success']) {
                $successCount++;
            } else {
                $errorCount++;
            }
        }
        
        // 5.3. –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–∫–∏ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–¥–∞—á–∞–º
        foreach ($toAdd as $item) {
            $task = $item['task'];
            $timer = $item['timer'];
            $taskId = $task['ID'];
            
            $currentTime = $this->formatTime($timer['timer_info']['RUN_TIME']);
            $newTitle = "‚è±Ô∏è {$currentTime} | {$task['TITLE']}";
            
            $result = $this->updateTask($taskId, $newTitle);
            
            if ($result['success']) {
                $successCount++;
            } else {
                $errorCount++;
            }
        }
        
        return [
            'success' => $successCount,
            'errors' => $errorCount,
            'total' => count($toClean) + count($toUpdate) + count($toAdd)
        ];
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    public function getActiveTimersInfo()
    {
        $this->initTasksModule();
        return $this->getActiveTimers();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    public function checkTimerIcon($title)
    {
        return $this->hasTimerIcon($title);
    }
    
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –∑–Ω–∞—á–∫–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    public function cleanTitle($title)
    {
        return $this->cleanTimerFromTitle($title);
    }
}